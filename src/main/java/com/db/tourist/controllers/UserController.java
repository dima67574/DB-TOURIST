package com.db.tourist.controllers;import com.db.tourist.models.User;import com.db.tourist.services.UserService;import com.db.tourist.utils.View;import com.db.tourist.utils.captcha.Captcha;import com.db.tourist.utils.validators.UserValidator;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.*;import org.springframework.web.servlet.ModelAndView;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@Controllerpublic class UserController {    @Autowired    private UserValidator userValidator;    @Autowired    private UserService userService;    @Autowired    private Captcha captcha;    @RequestMapping(value = "/captcha", method = RequestMethod.GET)    public void captcha(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        captcha.captcha(req, resp);    }    @RequestMapping(value = "/", method = RequestMethod.GET)    public ModelAndView home() {        View view = new View("main");        view.addObject("title", "Главная");        return view;    }    @RequestMapping(value = "/login", method = RequestMethod.GET)    public ModelAndView login(String error) {        View view = new View("login");        view.addObject("title", "Вход");        if (error != null)            view.addObject("error", true);        return view;    }    @RequestMapping(value = "/registration", method = RequestMethod.GET)    public ModelAndView registration(Model model) {        View view = new View("registration");        view.addObject("title", "Регистрация");        view.addObject("user", model.asMap().get("user") != null ? (User)model.asMap().get("user") : new User());        return view;    }    @RequestMapping(value = "/registration", method = RequestMethod.POST)    public ModelAndView registrationPost(@RequestParam("captcha") String captchaReq, User user, BindingResult result,                                         HttpServletRequest request,                                         RedirectAttributes redirectAttributes) {        if (!captchaReq.equals(captcha.getGeneratedKey(request))) {            redirectAttributes.addFlashAttribute("error", "Введен неверный код с изображения");            redirectAttributes.addFlashAttribute("user", user);        } else {            userValidator.validate(user, result, false);            if (result.hasErrors()) {                View view = new View("registration");                view.addObject("title", "Регистрация");                return view;            }            User registered = userService.create(user);            if(registered != null) {                userService.authentication(registered);                redirectAttributes.addFlashAttribute("success", "Регистрация завершена. Теперь вы можете указать свои предпочтения");                return new ModelAndView("redirect:/settings");            } else {                redirectAttributes.addFlashAttribute("error", "При регистрации произошла ошибка");                redirectAttributes.addFlashAttribute("user", user);            }        }        return new ModelAndView("redirect:/registration");    }    @RequestMapping(value = "/registration/confirm/{token}", method = RequestMethod.GET)    public String confirmRegistration(@PathVariable("token") String token, RedirectAttributes redirectAttributes) {        if(userService.checkRegistrationToken(token)) {            redirectAttributes.addFlashAttribute("success", "Регистрация завершена. Вы можете войти в систему, используя свои учетные данные");        } else {            redirectAttributes.addFlashAttribute("error", "Ссылка для подтверждения не верна, либо просрочена");        }        return "redirect:/login";    }    @RequestMapping(value = "/restore", method = RequestMethod.GET)    public ModelAndView restore() {        View view = new View("restore/requestForm");        view.addObject("title", "Восстановление доступа");        return view;    }    @RequestMapping(value = "/restore", method = RequestMethod.POST)    public ModelAndView restorePost(@RequestParam("email") String email,                                    HttpServletRequest request,                                    RedirectAttributes redirectAttributes) {        User user = userService.findByEmail(email);        if(user != null) {            if(userService.sendRestoreRequest(user, request)){                redirectAttributes.addFlashAttribute("info", "Ссылка для восстановления доступа отправлена на <b>" + user.getEmail() + "</b>");            } else {                redirectAttributes.addFlashAttribute("error", "Произошла ошибка");            }        } else {            redirectAttributes.addFlashAttribute("error", "Пользователь с указанным email не найден");        }        return new ModelAndView("redirect:/restore");    }    @RequestMapping(value = "/restore/confirm/{token}", method = RequestMethod.GET)    public ModelAndView confirmRestore(@PathVariable("token") String token) {        View view = new View("restore/setPassword");        view.addObject("title", "Восстановление доступа");        User user = userService.findByToken(token);        if(user != null) {            view.addObject("token", token);        } else {            view.addObject("error", "Ссылка для восстановления не верна, либо просрочена");            view.addObject("hideForm", true);        }        return view;    }    @RequestMapping(value = "/restore/confirm/{token}", method = RequestMethod.POST)    public String confirmRestorePost(@PathVariable("token") String token,                                           @RequestParam("password") String password,                                           RedirectAttributes redirectAttributes) {        User user = userService.findByToken(token);        if(user != null) {            if(userService.changePassword(user, password, true)) {                userService.authentication(user);                redirectAttributes.addFlashAttribute("success", "Пароль успешно изменен");                return "redirect:/";            } else {                redirectAttributes.addFlashAttribute("error", "Старый и новый пароли совпадают, придумайте новый пароль");                return "redirect:/restore/confirm/" + token;            }        }        return "redirect:/restore";    }    @RequestMapping(value = "/admin/users", method = RequestMethod.GET)    public ModelAndView manageUsersList() {        View view = new View("users/list", true);        view.addObject("title", "Управление пользователями");        view.addObject("users", userService.findAll());        view.addObject("user", userService.getUser());        return view;    }    @ResponseBody    @RequestMapping(value = "/admin/users/delete", method = RequestMethod.POST)    public void deleteUser(@RequestParam("id") Long userId) {        userService.delete(userId);    }    @ResponseBody    @RequestMapping(value = "/admin/users/activate", method = RequestMethod.POST)    public Boolean activateUser(@RequestParam("id") Long userId) {        User user = userService.findOne(userId);        if(user != null) {            return userService.save(user) != null;        } else {            return false;        }    }    @ResponseBody    @RequestMapping(value = "/admin/users/lock", method = RequestMethod.POST)    public Boolean lockUser(@RequestParam("id") Long id) {        return userService.lockUser(id, true);    }    @ResponseBody    @RequestMapping(value = "/admin/users/unlock", method = RequestMethod.POST)    public Boolean unlockUser(@RequestParam("id") Long id) {        return userService.lockUser(id, false);    }    @RequestMapping(value = "/admin/users/edit/{id}", method = RequestMethod.GET)    public ModelAndView edit(@PathVariable("id") Long id) {        View view = new View("users/edit", true);        view.addObject("title", "Редактирование пользователя");        view.addObject("user", userService.findOne(id));        return view;    }    @RequestMapping(value = "/admin/users/edit/{id}", method = RequestMethod.POST)    public ModelAndView editPost(User user, BindingResult result, RedirectAttributes redirectAttributes) {        userValidator.validate(user, result, true);        if (result.hasErrors()) {            return new View("users/edit", true);        }        User updUser = userService.findOne(user.getId());        if(updUser != null) {            updUser.setName(user.getName());            updUser.setSurname(user.getSurname());            updUser.setPatronymic(user.getPatronymic());            updUser.setPhoneNumber(user.getPhoneNumber());            updUser.setEmail(user.getEmail());            updUser.setLogin(user.getLogin());            if(user.getRole() != null) {                updUser.setRole(user.getRole());            }            userService.save(updUser);            redirectAttributes.addFlashAttribute("success", "Пользователь " + updUser.getFio() + " успешно отредактирован");        }        return new ModelAndView("redirect:/admin/users");    }}